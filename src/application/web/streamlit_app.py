"""
Aplicaci칩n web con Streamlit para la TRM.
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, timedelta

from ...application.services.trm_application_service import TRMApplicationService


def run_streamlit_app():
    """
    Ejecuta la aplicaci칩n web con Streamlit.
    """
    # Inicializar el servicio de aplicaci칩n
    trm_app_service = TRMApplicationService()
    
    # Configuraci칩n de la p치gina
    st.set_page_config(
        page_title="TRM Colombia - Hist칩rico",
        page_icon="游늳",
        layout="wide"
    )
    
    # T칤tulo de la aplicaci칩n
    st.title("游늵 Hist칩rico TRM Colombia")
    st.markdown("Aplicaci칩n para consultar y analizar el hist칩rico de la Tasa Representativa del Mercado (TRM) en Colombia")
    
    # Sidebar para filtros
    st.sidebar.header("Filtros")
    
    # Obtener rango de fechas disponibles
    min_date, max_date = trm_app_service.get_date_range()
    
    # Filtro de fechas
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_date = st.date_input("Fecha inicial", min_date, min_value=min_date, max_value=max_date)
    with col2:
        end_date = st.date_input("Fecha final", max_date, min_value=min_date, max_value=max_date)
    
    # Botones de acceso r치pido para rangos de fechas
    st.sidebar.markdown("### Rangos predefinidos")
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("칔ltimo mes"):
            end_date = max_date
            start_date = end_date - timedelta(days=30)
            st.experimental_rerun()
        
        if st.button("칔ltimo a침o"):
            end_date = max_date
            start_date = datetime(end_date.year - 1, end_date.month, end_date.day).date()
            st.experimental_rerun()
    
    with col2:
        if st.button("칔ltimos 3 meses"):
            end_date = max_date
            start_date = end_date - timedelta(days=90)
            st.experimental_rerun()
        
        if st.button("칔ltimos 5 a침os"):
            end_date = max_date
            start_date = datetime(end_date.year - 5, end_date.month, end_date.day).date()
            st.experimental_rerun()
    
    # Obtener datos filtrados
    trm_data = trm_app_service.get_trm_data(start_date.isoformat(), end_date.isoformat())
    filtered_data = pd.DataFrame(trm_data)
    filtered_data['fecha'] = pd.to_datetime(filtered_data['fecha'])
    
    # Mostrar estad칤sticas
    st.header("游닇 Estad칤sticas")
    stats = trm_app_service.get_statistics(start_date.isoformat(), end_date.isoformat())
    
    if stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("TRM M칤nima", f"${stats['min']:.2f}")
            st.metric("TRM Promedio", f"${stats['avg']:.2f}")
        
        with col2:
            st.metric("TRM M치xima", f"${stats['max']:.2f}")
            st.metric("TRM Mediana", f"${stats['median']:.2f}")
        
        with col3:
            st.metric("Valor Inicial", f"${stats['start_value']:.2f}")
            st.metric("Desviaci칩n Est치ndar", f"${stats['std']:.2f}")
        
        with col4:
            st.metric("Valor Final", f"${stats['end_value']:.2f}")
            st.metric("Variaci칩n", f"{stats['change_pct']:.2f}%", 
                     delta=f"{stats['change']:.2f}")
    
    # Gr치fico principal
    st.header("游늳 Gr치fico de la TRM")
    
    # Opciones de visualizaci칩n
    chart_options = st.expander("Opciones de visualizaci칩n")
    with chart_options:
        col1, col2 = st.columns(2)
        
        with col1:
            show_ma = st.checkbox("Mostrar promedio m칩vil", value=True)
            ma_window = st.slider("Ventana del promedio m칩vil", 5, 100, 30)
        
        with col2:
            show_trend = st.checkbox("Mostrar l칤nea de tendencia", value=False)
            log_scale = st.checkbox("Escala logar칤tmica", value=False)
    
    # Preparar datos para el gr치fico
    if show_ma:
        ma_data = trm_app_service.get_moving_average(ma_window, start_date.isoformat(), end_date.isoformat())
        ma_df = pd.DataFrame(ma_data)
        ma_df['fecha'] = pd.to_datetime(ma_df['fecha'])
    else:
        ma_df = filtered_data.copy()
    
    # Crear gr치fico
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Gr치fico principal
    sns.lineplot(x='fecha', y='trm', data=filtered_data, ax=ax, color='blue', label='TRM')
    
    # A침adir promedio m칩vil si est치 seleccionado
    if show_ma:
        ma_col = f'ma_{ma_window}'
        if ma_col in ma_df.columns:
            sns.lineplot(x='fecha', y=ma_col, data=ma_df, ax=ax, color='red', 
                        label=f'Promedio M칩vil ({ma_window} d칤as)')
    
    # A침adir l칤nea de tendencia si est치 seleccionada
    if show_trend and not filtered_data.empty:
        # Crear variable num칠rica para la regresi칩n
        x = np.arange(len(filtered_data))
        y = filtered_data['trm'].values
        
        # Calcular la l칤nea de tendencia
        z = np.polyfit(x, y, 1)
        p = np.poly1d(z)
        
        # A침adir al gr치fico
        ax.plot(filtered_data['fecha'], p(x), "g--", label=f'Tendencia: {z[0]:.2f}x + {z[1]:.2f}')
    
    # Configurar escala logar칤tmica si est치 seleccionada
    if log_scale:
        ax.set_yscale('log')
    
    # Configurar el gr치fico
    ax.set_title('Hist칩rico TRM Colombia')
    ax.set_xlabel('Fecha')
    ax.set_ylabel('TRM (COP/USD)')
    ax.grid(True)
    ax.legend()
    
    # Mostrar el gr치fico
    st.pyplot(fig)
    
    # Tabla de datos
    st.header("游늶 Datos")
    st.dataframe(filtered_data)
    
    # An치lisis de variaciones
    st.header("游댌 An치lisis de Variaciones")
    
    threshold = st.slider("Umbral de variaci칩n (%)", 0.5, 5.0, 1.0, 0.1)
    variations_data = trm_app_service.get_extreme_variations(threshold, start_date.isoformat(), end_date.isoformat())
    variations = pd.DataFrame(variations_data)
    
    if not variations.empty:
        st.write(f"Se encontraron {len(variations)} d칤as con variaciones superiores al {threshold}%")
        
        # Crear gr치fico de variaciones
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # Barras para variaciones
        sns.barplot(x='fecha', y='variacion_pct', data=variations, ax=ax, palette='coolwarm')
        
        # Configurar el gr치fico
        ax.set_title(f'Variaciones diarias superiores al {threshold}%')
        ax.set_xlabel('Fecha')
        ax.set_ylabel('Variaci칩n (%)')
        ax.grid(True, axis='y')
        
        # Rotar etiquetas del eje x
        plt.xticks(rotation=45)
        
        # Mostrar el gr치fico
        st.pyplot(fig)
        
        # Mostrar tabla de variaciones
        st.dataframe(variations.sort_values('variacion_pct', ascending=False))
    else:
        st.write(f"No se encontraron variaciones superiores al {threshold}%")
    
    # Informaci칩n adicional
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Acerca de")
    st.sidebar.info("""
    Esta aplicaci칩n permite consultar y analizar el hist칩rico de la Tasa Representativa del Mercado (TRM) en Colombia.
    
    La TRM es la cantidad de pesos colombianos por un d칩lar de los Estados Unidos.
    """)
    
    # Footer
    st.markdown("---")
    st.markdown("Desarrollado con 仇벒잺 usando Python y Streamlit")


if __name__ == '__main__':
    run_streamlit_app()